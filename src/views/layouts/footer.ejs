<footer class="page-footer footer">
    <div class="container">
        <div class="row">
            <div class="col l6 s12">
                <h5 class="white-text">Footer Content</h5>
                <p class="grey-text text-lighten-4">You can use rows and columns here to organize your footer content.</p>
            </div>
            <div class="col l4 offset-l2 s12">
                <h5 class="white-text">Links</h5>
                <ul>
                  <li><a class="grey-text text-lighten-3" href="#!">Link 1</a></li>
                  <li><a class="grey-text text-lighten-3" href="#!">Link 2</a></li>
                  <li><a class="grey-text text-lighten-3" href="#!">Link 3</a></li>
                  <li><a class="grey-text text-lighten-3" href="#!">Link 4</a></li>
                </ul>
            </div>
        </div>
            </div>
        <div class="footer-copyright">
        <div class="container">
            © 2014 Copyright Text
        </div>
    </div>
 </footer>
            

<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

<!-- Inicializa todos los componentes de Materialize -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
    M.AutoInit();
});
</script>
<!--  form registro y login -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var elems = document.querySelectorAll('select');
        M.FormSelect.init(elems);
        const signupForm = document.getElementById('signupForm');
        const signinForm = document.getElementById('signinForm');

        function validateForm(form) {
            const inputs = form.querySelectorAll('.validate');
            for (let i = 0; i < inputs.length; i++) {
                if (!inputs[i].value.trim()) {
                    return false;
                }
            }
            return true;
        }
        function addFormSubmitListener(form) {
            form.addEventListener('submit', function(event) {
                if (!validateForm(form)) {
                    event.preventDefault();
                    M.toast({html: 'Por favor, rellena los campos.', classes: 'red'});
                }
            });
        }
        if (signupForm) {
            addFormSubmitListener(signupForm);
        }
        if (signinForm) {
            addFormSubmitListener(signinForm);
        }
    });
</script>

<!--  inicializa modales -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var modals = document.querySelectorAll('.modal');
        M.Modal.init(modals);
    });
</script>

<!-- verificar disponibilidad salon * fecha + manejo btn segun disponibilidad + todos los campos requeridos, btn cancelar limpia form -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const formCrear = document.getElementById('formCrear');
        const emailInput = document.getElementById('email');
        const nameInput = document.getElementById('name');
        const lastnameInput = document.getElementById('lastname');
        const contactInput = document.getElementById('contact');
        const eventDateInput = document.getElementById('eventDate');
        const salonTypeSelect = document.getElementById('salonType');
        const detailsTextarea = document.getElementById('details');
        const availabilityMessage = document.getElementById('availabilityMessage');
        const crearClienteButton = document.getElementById('crearClienteButton');
        const cancelarButton = document.getElementById('cancelarButton');
    
        let isAvailable = false;
            
        emailInput.addEventListener('input', toggleSubmitButton);
        nameInput.addEventListener('input', toggleSubmitButton);
        lastnameInput.addEventListener('input', toggleSubmitButton);
        contactInput.addEventListener('input', toggleSubmitButton);
        eventDateInput.addEventListener('input', checkAvailability);
        salonTypeSelect.addEventListener('change', checkAvailability);
        detailsTextarea.addEventListener('input', toggleSubmitButton);

        cancelarButton.addEventListener('click', function() {
            formCrear.reset();
            availabilityMessage.textContent = '';
            crearClienteButton.disabled = true;
            isAvailable = false;
        });
    
        async function checkAvailability() {
            const eventDate = eventDateInput.value;
            const salonType = salonTypeSelect.value;
            console.log('Datos enviados:', { eventDate, salonType }); 
            if (!eventDate || !salonType) {
                availabilityMessage.textContent = '';
                isAvailable = false;
                toggleSubmitButton();
                return;
            }
            try {
                const response = await fetch('/perfilAdmin/checkAvailability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ eventDate, salonType })
                });
                if (response.ok) {
                    const result = await response.json();
                    if (result.available) {
                        availabilityMessage.textContent = 'El salón está disponible.';
                        availabilityMessage.style.color = 'green';
                        isAvailable = true;
                    } else {
                        availabilityMessage.textContent = 'El salón no está disponible.';
                        availabilityMessage.style.color = 'red';
                        isAvailable = false;
                    }
                } else {
                    console.error('Error en la respuesta del servidor');
                    availabilityMessage.textContent = 'Error al verificar la disponibilidad';
                    availabilityMessage.style.color = 'red';
                    isAvailable = false;
                }
            } catch (error) {
                console.error('Error al realizar la solicitud', error);
                availabilityMessage.textContent = 'Error al verificar la disponibilidad';
                availabilityMessage.style.color = 'red';
                isAvailable = false;
            }
            toggleSubmitButton();
        }
        function toggleSubmitButton() {
            const email = emailInput.value.trim();
            const name = nameInput.value.trim();
            const lastname = lastnameInput.value.trim();
            const contact = contactInput.value.trim();
            const eventDate = eventDateInput.value;
            const salonType = salonTypeSelect.value;
            const details = detailsTextarea.value.trim();
            if (email && name && lastname && contact && eventDate && salonType && details && isAvailable) {
                crearClienteButton.disabled = false;
            } else {
                crearClienteButton.disabled = true;
            }
        }
    });
</script>

<!-- validar pagos del form edit -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const formEditar = document.getElementById('formEditar');
        formEditar.addEventListener('submit', function(event) {
            const amountChild = document.getElementById('amountChild').value;
            const amountAdult = document.getElementById('amountAdult').value;

            if (amountChild < 0 || amountAdult < 0) {
                event.preventDefault();
                alert('Los montos de pago deben ser positivos.');
            }
        });
    });
</script>

<!-- creación tabla dinámica y paginacion  -->
<script>
    const rowsPerPage = 9;
    let currentPage = 1;
    let clients = [];
    async function fetchClients() {
            try {
                const response = await fetch('/perfilAdmin/getAllclients');
                clients = await response.json();
                goToPage(1);
            } catch (error) {
                console.error('Error fetching clients:', error);
            }
        }
        function openEditModal(clientData) {
        document.getElementById('clientId').value = clientData._id;
        document.getElementById('emailEditar').value = clientData.email;
        document.getElementById('nameEditar').value = clientData.name;
        document.getElementById('lastnameEditar').value = clientData.lastname;
        document.getElementById('contactEditar').value = clientData.contact;
        document.getElementById('detailsEditar').value = clientData.details;
        document.getElementById('eventDate').value = clientData.eventDate;
        document.getElementById('salonType').value = clientData.salonType;

        document.getElementById('formEditar').setAttribute('action', '/perfilAdmin/update/' + clientData._id);
    }
    function handleEditButtonClick(event) {
        const clientId = event.target.closest('.edit-button').dataset.id;
        const client = clients.find(client => client._id === clientId);
        if (client) {
            openEditModal(client);
        }
    }
    // renderización clientes 
    function renderTable(data) {
        const tableContainer = document.getElementById('clientTableContainer');
        tableContainer.innerHTML = `
            <table class="responsive-table striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Contacto</th>
                        <th>Detalles</th>
                        <th>Fecha del Evento</th>
                        <th>Tipo de Salón</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.map(client => `
                        <tr>
                            <td class="client-name">${client.name}</td>
                            <td class="client-lastname">${client.lastname}</td>
                            <td class="client-email">${client.email}</td>
                            <td class="client-contact">${client.contact}</td>
                            <td class="client-details">${client.details}</td>
                            <td class="client-eventDate">${client.eventDate}</td>
                            <td class="client-salonType">${client.salonType}</td>
                            <td>
                                <div class="edit_delete">
                                    <a href="#client-details" class="details-button" data-id="${client._id}">
                                        <i class="material-icons">visibility</i>
                                    </a>
                                    <a href="#modalEditar" class="modal-trigger edit-button" data-id="${client._id}"
                                        data-email="${client.email}" data-name="${client.name}"
                                        data-lastname="${client.lastname}" data-contact="${client.contact}"
                                        data-details="${client.details}" data-eventdate="${client.eventDate}"
                                        data-salontype="${client.salonType}" data-amountchild="${client.amountChild}"
                                        data-amountadult="${client.amountAdult}" data-specificdetails="${client.specificDetails}">
                                        <i class="material-icons delete_button">edit</i>
                                    </a>                            
                                    <form action="/perfilAdmin/delete/${client._id}" method="POST" onsubmit="return confirm('¿Estás seguro de que quieres eliminar este cliente?');">
                                        <button type="submit" class="delete_button">
                                            <i class="material-icons delete_button">delete_forever</i>
                                        </button>
                                    </form>
                                </div>
                            </td>
                    </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
        document.querySelectorAll('.details-button').forEach(button => {
            button.addEventListener('click', (event) => {
                const clientId = event.target.closest('.details-button').dataset.id;
                showClientDetails(clientId);
            });
        });
        document.querySelectorAll('.edit-button').forEach(button => {
            button.addEventListener('click', handleEditButtonClick);
        });
    }
    function renderPagination(totalPages) {
        const paginationContainer = document.getElementById('paginationContainer');
        let paginationHTML = '<ul class="pagination">';
        
        if (currentPage > 1) {
            paginationHTML += `<li class="waves-effect"><a href="#!" onclick="goToPage(${currentPage - 1})"><i class="material-icons">chevron_left</i></a></li>`;
        } else {
            paginationHTML += `<li class="disabled"><a href="#!"><i class="material-icons">chevron_left</i></a></li>`;
        }
        for (let i = 1; i <= totalPages; i++) {
            if (i === currentPage) {
                paginationHTML += `<li class="active"><a href="#!">${i}</a></li>`;
            } else {
                paginationHTML += `<li class="waves-effect"><a href="#!" onclick="goToPage(${i})">${i}</a></li>`;
            }
        }
        if (currentPage < totalPages) {
            paginationHTML += `<li class="waves-effect"><a href="#!" onclick="goToPage(${currentPage + 1})"><i class="material-icons">chevron_right</i></a></li>`;
        } else {
            paginationHTML += `<li class="disabled"><a href="#!"><i class="material-icons">chevron_right</i></a></li>`;
        }

        paginationHTML += '</ul>';
        paginationContainer.innerHTML = paginationHTML;
    }
    function goToPage(page) {
        currentPage = page;
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = startIndex + rowsPerPage;
        renderTable(clients.slice(startIndex, endIndex));
        renderPagination(Math.ceil(clients.length / rowsPerPage));
    }
    // buscador por nombre, apellido, mail
    document.getElementById('buscarCliente').addEventListener('keyup', function() {
        const query = this.value.toLowerCase();
        const filteredClients = clients.filter(client => 
            client.email.toLowerCase().includes(query) ||
            client.name.toLowerCase().includes(query) ||
            client.lastname.toLowerCase().includes(query)
        );
        currentPage = 1;
        goToPage(1);
        renderTable(filteredClients.slice(0, rowsPerPage));
        renderPagination(Math.ceil(filteredClients.length / rowsPerPage));

    // Mostrar/ocultar el mensaje de resultado
        const mensajeResultado = document.getElementById('mensajeResultado');
        if (filteredClients.length === 0) {
            mensajeResultado.style.display = 'block';
        } else {
            mensajeResultado.style.display = 'none';
        }
    });
    
    // Carga detalles por c/cliente sin recargar toda la página
    async function showClientDetails(clientId) {
        try {
            const response = await fetch(`/perfilAdmin/clientDetails/${clientId}`);
            const data = await response.text();
            const clientDetailsContainer = document.getElementById('client-details');
            clientDetailsContainer.innerHTML = data;
            clientDetailsContainer.style.display = 'block';
            // Activar el buscador de pagos una vez que los detalles estén cargados
        const paymentSearchInput = document.getElementById('searchDate');
        if (paymentSearchInput) {
            console.log('Buscador de fecha encontrado:', paymentSearchInput);
            paymentSearchInput.addEventListener('keyup', function() {
                console.log('Entrada capturada:', this.value); //este si lo muestra 
                const query = this.value.toLowerCase();
                const paymentRows = document.querySelectorAll('#paymentsTableBody tr');
                paymentRows.forEach(paymentRows => { 

                    const content = paymentRows.textContent.toLowerCase().replace(/\s+/g, ''); // Eliminar espacios adicionales
                    console.log('Comparando:', content, 'con', query); //este no me lo muestra
                    const isMatch = content.includes(query);
                    console.log(`Buscando en: ${content}, Coincidencia: ${isMatch}`); //este tampoco muestra
                    paymentRows.style.display = isMatch ? '' : 'none'; // Mostrar u ocultar
                    console.log('Filas de la tabla seleccionadas:', paymentRows);
                });
            });
        }
            const closeButton = document.getElementById('close-details');
            if (closeButton) {
                closeButton.addEventListener('click', function() {
                    clientDetailsContainer.innerHTML = '';
                    clientDetailsContainer.style.display = 'none';
                });
            }
            window.scrollTo({
                top: clientDetailsContainer.offsetTop,
                behavior: 'smooth'
            });
        } catch (error) {
            console.error('Error fetching client details:', error);
        }
    }
    fetchClients();
    
</script>

</body>
</html>